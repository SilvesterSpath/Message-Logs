IT_LOGGER

store and get our data:
	- 'json server' fake REST API not in production
	- 'materialize' for the UI design and javascript widgets
	- install react, json server (as Dev dependency -D) and concurrently
	- with json-server I don't have to add an id because it will autoincrement
	- materialize is a CSS framework
	- similar to Bootstrap, Foundation, Bulma
	- we will be using buttons and models
	- the materialize-ui with react is a bit much code
	- materila icons are used as fontawesome
	- npm install materialize-css
	- to use modal we have to initialize it

11/6
	- racfp (component with prototype)
	- we use moment to display date
	- npm install moment react-moment

11/7
	- add button
	- regarding the modals the modal that references to another modal, there should be the id match the referring modal 'href' attribute
	- with materialize we can create error messages as 'toast'

11/8
	- at the Add...Modal.js, in the return () the id='tech-modal' should be exactly as at the 'layout' AddBtn.js '#href' attribute
	- if an <a></a> tag doesn't go nowhere we can use the '#!' characters

12/1
	- implementing REDUX
	- REDUX is for app level state management
	- things are sent down from the state through the reducer and things are sent  up through actions
	- if we want to add a new log, that going to call an action and then that will dispatch to the reducer and the reducer will decide how to manipulate the rest of the components and the UI
	- REDUX has nothing to do with React, react-redux connects the two together
	- for the middleware: compsedWithDevTools(applyMiddleware(...middleware))

12/2
	- to get logs we have to make an asyncronous call, so instead of returning a direct onject like in 'setLoading()', we have return a function
	'- there is exist a form (dispatch, getState)'
	- when we making an async function it is highly recommended to use a try/catch syntax
	- workflow:
		- the action makes the request, dispatch ('send') the data to the reducer and the reducer manage the state in the actual case with the sended data
	- we want to come our all 'ajax' calls from the actions
	- two things we want to do, get the logs and call getLogs()
	- for this we want bring in 'connect', and at the bottom export default connect(mapStateToProps)(<component>)
	- in 'mapStateToProps' the state.log is the logReducer
	- if I bring in the app level state I dont need the component level state
	- if I bring in an action with the connect() syntax it will be a props, so it will called props.getLogs, but after we destructure it it will be getLogs again

12/4
	- in the AddLogModal.js we run the action
	- we are not bringin in any state in AddLogModal.js so 'mapStateToProps' is null
	- 